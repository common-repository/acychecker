"use strict";

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr && (typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]); if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var DashboardDefault = /*#__PURE__*/function () {
  function DashboardDefault() {
    _classCallCheck(this, DashboardDefault);

    this.initLineChart();
    this.initDonutChart();
    this.initPieChart();
  }

  _createClass(DashboardDefault, [{
    key: "initPieChart",
    value: function initPieChart() {
      var rawOptions = jQuery('#acyc__dashboard__chart__blocked').attr('data-acyc-options');
      if (!rawOptions) return;
      rawOptions = AjaxService.parseJson(rawOptions);
      if (!rawOptions) return;
      var chartOption = {
        chart: {
          type: 'donut',
          height: 300
        },
        series: [],
        labels: [],
        dataLabels: {
          dropShadow: {
            enabled: false
          }
        },
        legend: {
          show: false
        },
        plotOptions: {
          pie: {
            expandOnClick: false,
            donut: {
              labels: {
                show: true,
                total: {
                  show: true,
                  showAlways: false,
                  label: ACYC_LANGUAGES['ACYC_TOTAL'],
                  color: '#000000',
                  formatter: function formatter(w) {
                    return rawOptions.total;
                  }
                },
                name: {
                  color: '#000000',
                  formatter: function formatter(val) {
                    return ACYC_LANGUAGES['ACYC_TOTAL'];
                  }
                },
                value: {
                  color: '#000000',
                  formatter: function formatter(val) {
                    return rawOptions.total;
                  }
                }
              },
              expandOnClick: false
            }
          }
        },
        tooltip: {
          custom: function custom(_ref) {
            var series = _ref.series,
                seriesIndex = _ref.seriesIndex,
                dataPointIndex = _ref.dataPointIndex,
                w = _ref.w;
            return "<div class=\"acyc__chart__label__tooltip\">".concat(ACYC_LANGUAGES["ACYC_".concat(w.config.labels[seriesIndex].toUpperCase())], " ").concat(series[seriesIndex], "%</div>");
          }
        }
      };
      rawOptions.values.map(function (option) {
        chartOption.series.push(option.value);
        chartOption.labels.push(option.block_reason);
      });
      var chart = new ApexCharts(document.querySelector('#acyc__dashboard__chart__blocked'), chartOption);
      chart.render();
    }
  }, {
    key: "initLineChart",
    value: function initLineChart() {
      var data = document.getElementById('acyc__dashboard__chart__line').getAttribute('data-acyc-options');
      if (!data) return;
      data = AjaxService.parseJson(data);
      if (!data) return;
      var options = {
        chart: {
          type: 'line',
          height: '300px'
        },
        series: [{
          data: []
        }],
        xaxis: {
          categories: []
        }
      };

      for (var _i = 0, _Object$entries = Object.entries(data); _i < _Object$entries.length; _i++) {
        var _Object$entries$_i = _slicedToArray(_Object$entries[_i], 2),
            month = _Object$entries$_i[0],
            numberOfCalls = _Object$entries$_i[1];

        options.series[0].data.push(numberOfCalls);
        options.xaxis.categories.push(month);
      }

      var chart = new ApexCharts(document.querySelector('#acyc__dashboard__chart__line'), options);
      chart.render();
    }
  }, {
    key: "initDonutChart",
    value: function initDonutChart() {
      var _this = this;

      var allDonutType = ['disposable', 'free', 'accept_all', 'role_email'];
      allDonutType.map(function (type) {
        var percentage = _this.getPercentageDonut(type);

        var options = _this.getOptionDonutChart(percentage, ACYC_LANGUAGES["ACYC_".concat(type.toUpperCase())]);

        var chart = new ApexCharts(document.querySelector("#acyc__dashboard__chart__".concat(type)), options);
        chart.render();
      });
    }
  }, {
    key: "getPercentageDonut",
    value: function getPercentageDonut(type) {
      var percentage = document.getElementById("acyc__dashboard__chart__".concat(type)).getAttribute("data-acyc-".concat(type));
      if (!percentage) return 0;
      return percentage;
    }
  }, {
    key: "getOptionDonutChart",
    value: function getOptionDonutChart(percentage, name) {
      return {
        chart: {
          height: 300,
          type: 'radialBar'
        },
        series: [percentage],
        labels: [name]
      };
    }
  }]);

  return DashboardDefault;
}();

document.addEventListener('DOMContentLoaded', function () {
  new DashboardDefault();
});