"use strict";

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var DatabaseDefault = /*#__PURE__*/function () {
  function DatabaseDefault() {
    _classCallCheck(this, DatabaseDefault);

    this.$saveButton = jQuery('#acyc__database__save__button');
    this.periodicValues = ['week', 'month'];
    this.changeButtonText();
    this.onChangeRadioExecutionTime();
    this.onChangeTableSelection();
    this.displayFilter();
    this.setConditionsFromAction();
  }

  _createClass(DatabaseDefault, [{
    key: "onChangeRadioExecutionTime",
    value: function onChangeRadioExecutionTime() {
      var _this = this;

      jQuery('input[name="acyc_config[execution_selected]"]').on('change', function () {
        return _this.changeButtonText();
      });
    }
  }, {
    key: "changeButtonText",
    value: function changeButtonText() {
      var selectedRadio = document.querySelector('input[name="acyc_config[execution_selected]"]:checked');

      if (!selectedRadio || this.periodicValues.includes(selectedRadio.value)) {
        this.changeTextToSave();
      } else {
        this.changeTextToProcess();
      }
    }
  }, {
    key: "changeTextToSave",
    value: function changeTextToSave() {
      this.$saveButton.text(ACYC_LANGUAGES.ACYC_SAVE);
      this.$saveButton.attr('data-task', 'save');
    }
  }, {
    key: "changeTextToProcess",
    value: function changeTextToProcess() {
      this.$saveButton.text(ACYC_LANGUAGES.ACYC_PROCESS);
      this.$saveButton.attr('data-task', 'process');
    }
  }, {
    key: "onChangeTableSelection",
    value: function onChangeTableSelection() {
      var _this2 = this;

      jQuery('input[name*="acyc_config[tables_selected]"]').on('change', function () {
        return _this2.displayFilter();
      });
    }
  }, {
    key: "displayFilter",
    value: function displayFilter() {
      jQuery('input[name*="acyc_config[tables_selected]"]').each(function () {
        var table = jQuery(this).val();
        var display = jQuery(this).is(':checked') ? 'flex' : 'none';
        jQuery("[data-acyc-table=\"".concat(table, "\"]")).css('display', display);
      });
    }
  }, {
    key: "setConditionsFromAction",
    value: function setConditionsFromAction() {
      var that = this;
      jQuery('input[name="acyc_config[action_selected]"]').off('change').on('change', function () {
        that.toggleConditionsSection();
      });
      this.toggleConditionsSection();
    }
  }, {
    key: "toggleConditionsSection",
    value: function toggleConditionsSection() {
      if (jQuery('#do_nothing').is(':checked')) {
        jQuery('.hide_on_do_nothing').hide();
      } else {
        jQuery('.hide_on_do_nothing').show();
      }
    }
  }]);

  return DatabaseDefault;
}();

jQuery(function () {
  new DatabaseDefault();
});