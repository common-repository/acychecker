"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var AjaxService = /*#__PURE__*/function () {
  function AjaxService() {
    _classCallCheck(this, AjaxService);
  }

  _createClass(AjaxService, null, [{
    key: "post",
    value: function post() {
      var _this = this;

      var url = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : ACYC_AJAX_URL;
      var data = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      return jQuery.post(url, data).then(function (res) {
        if (_typeof(res) !== 'object') {
          res = AjaxService.parseJson(res);
        }

        if (res.error && !_this.empty(res.message)) {
          console.error(res.message);
        }

        return res;
      }).fail(function (jqXHR, textStatus, errorThrown) {
        var response = {};
        response.error = true;
        response.message = errorThrown;
        response.data = [];
        console.error("Error calling ".concat(url, ", responded with error ").concat(textStatus, " ").concat(errorThrown));
        return response;
      });
    }
  }, {
    key: "parseJson",
    value: function parseJson(json, defaultValue) {
      if (_typeof(json) === 'object') return json;

      try {
        var begin = json.indexOf('{');
        var beginBrackets = json.indexOf('[');

        if (!isNaN(begin) && begin > 0 && !isNaN(beginBrackets) && beginBrackets > 0) {
          json = json.substring(begin);
        }

        if (json !== undefined || json !== '') return JSON.parse(json);
      } catch (error) {
        console.error(error.stack);
      }

      return defaultValue;
    }
  }]);

  return AjaxService;
}();