"use strict";

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var TooltipService = /*#__PURE__*/function () {
  function TooltipService() {
    _classCallCheck(this, TooltipService);
  }

  _createClass(TooltipService, null, [{
    key: "initTooltip",
    value: function initTooltip() {
      jQuery('.acyc__tooltip').off('mouseenter').on('mouseenter', function () {
        TooltipService.setPositionTooltip(jQuery(this).find('.acyc__tooltip__text'), jQuery(this));
      });
    }
  }, {
    key: "setPositionTooltip",
    value: function setPositionTooltip($tooltipText, $parent) {
      if ($tooltipText.hasClass('wysid_tooltip')) {
        $tooltipText.css({
          position: 'absolute',
          top: $parent.outerHeight() + 14 + 'px',
          left: '-' + (250 - $parent.outerWidth()) / 2 + 'px',
          width: '250px'
        });
        return;
      }

      var pos = $parent.offset();
      var top = pos.top - jQuery(window).scrollTop();
      var newTop, newLeft;

      if ($tooltipText.hasClass('acyc__tooltip__text__right')) {
        newTop = top - $tooltipText.height() < 0 ? 0 : top - $tooltipText.height();
        newLeft = pos.left + $parent.width() + 10 < 0 ? 0 : pos.left + $parent.width() + 10;
      } else if ($tooltipText.hasClass('acyc__tooltip__text__left')) {
        newTop = top - $tooltipText.height() < 0 ? 0 : top - $tooltipText.height();
        newLeft = pos.left - $tooltipText.width() - $parent.width() - 10 < 0 ? 0 : pos.left - $tooltipText.width() - $parent.width() - 10;
      } else {
        newTop = Math.max(0, top - $tooltipText.height() - 15);
        newLeft = Math.max(0, pos.left - $tooltipText.width() / 2 + $parent.width() / 2);
      }

      $tooltipText.css({
        top: newTop + 'px',
        left: newLeft + 'px'
      });
    }
  }]);

  return TooltipService;
}();