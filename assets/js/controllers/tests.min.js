"use strict";

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var AcycTests = /*#__PURE__*/function () {
  function AcycTests() {
    _classCallCheck(this, AcycTests);

    ListingService.initOrdering();
    ListingService.setCheckAll();
    ListingService.setCheckboxesActions();
    ListingService.setSelectActions();
    ListingService.setActionButtons();
    this.setMatchingUsersCounter();
    this.setHandleResults();
  }

  _createClass(AcycTests, [{
    key: "setHandleResults",
    value: function setHandleResults() {
      var thisService = this;
      jQuery('[data-open="acycmodal_handle_modal"]').on('click', function () {
        jQuery('[name^="acyc_config[conditions_selected]"]').trigger('change');
      });
      jQuery('#acyc__tests__handle__process').off('click').on('click', function () {
        var selectedTables = jQuery('input[name^="acyc_config[tables_selected]"]:checked'); // The user didn't select any table

        if (selectedTables.length === 0) {
          alert(ACYC_LANGUAGES.ACYC_NO_USER_TABLE_SELECTED);
          return;
        }

        var userTables = [];
        selectedTables.each(function () {
          userTables.push(jQuery(this).val());
        });
        var selectedConditions = jQuery('input[name^="acyc_config[conditions_selected]"]:checked'); // The user didn't select any condition

        if (selectedConditions.length === 0) {
          alert(ACYC_LANGUAGES.ACYC_PLEASE_SELECT_A_CONDITION);
          return;
        }

        var actionConditions = [];
        selectedConditions.each(function () {
          actionConditions.push(jQuery(this).val());
        });

        if (confirm(ACYC_LANGUAGES.ACYC_LAST_CONFIRMATION)) {
          thisService.rerunResultsHandling({
            page: 'acychecker_tests',
            ctrl: 'tests',
            task: 'ajaxHandleResults',
            userTables: userTables.join(','),
            userAction: jQuery('input[name="acyc_config[action_selected]"]:checked').val(),
            actionConditions: actionConditions.join(','),
            start: 0,
            limit: 5000
          });
        }
      });
    }
  }, {
    key: "displayMessage",
    value: function displayMessage(message, type) {
      var $messageContainer = jQuery('#acyc__tests__handle__message');
      jQuery('#acyc__tests__handle__message__message').html(message);
      jQuery('#acyc__tests__handle__progressbar').addClass('is-hidden');

      if (type === 'error') {
        $messageContainer.find('.acyc_green').addClass('is-hidden');
        $messageContainer.find('.acyc_red').removeClass('is-hidden');
      } else {
        $messageContainer.find('.acyc_green').removeClass('is-hidden');
        $messageContainer.find('.acyc_red').addClass('is-hidden');
      }

      $messageContainer.removeClass('is-hidden');
    }
  }, {
    key: "rerunResultsHandling",
    value: function rerunResultsHandling(data) {
      var _this = this;

      jQuery('#acyc__tests__handle__message').addClass('is-hidden');
      this.$counter = jQuery('.progress-counter');
      this.$counter.html('0%');
      this.$meter = jQuery('.progress-meter');
      this.$meter.animate({
        width: '0'
      }, 400);
      this.percentage = 0;
      this.totalHandledResults = 0;
      this.totalModifiedUsers = 0;
      jQuery('#acyc__tests__handle__progressbar').removeClass('is-hidden');
      var $checkedUsers = jQuery('[name="elements_checked[]"]:checked');

      if ($checkedUsers.length > 0) {
        data.selectedUsers = [];
        $checkedUsers.each(function () {
          if (jQuery(this).attr('data-acyc-finished') === 'true') {
            data.selectedUsers.push(jQuery(this).val());
          }
        });

        if (data.selectedUsers.length === 0) {
          this.displayMessage(ACYC_LANGUAGES.ACYC_SELECT_FINISHED_TESTS, 'error');
          return;
        }

        this.totalResults = data.selectedUsers.length;
        this.handleNextBatch(data);
      } else {
        AjaxService.post(ACYC_AJAX_URL, {
          page: 'acychecker_tests',
          ctrl: 'tests',
          task: 'ajaxGetTotalResults'
        }).then(function (response) {
          if (response.status !== 'success') {
            _this.displayMessage(response.message, 'error');

            return;
          }

          _this.totalResults = parseInt(response.data.totalResults);

          _this.handleNextBatch(data);
        });
      }
    }
  }, {
    key: "handleNextBatch",
    value: function handleNextBatch(data) {
      var _this2 = this;

      AjaxService.post(ACYC_AJAX_URL, data).then(function (response) {
        if (response.status !== 'success') {
          _this2.displayMessage(response.message, 'error');

          return;
        }

        _this2.totalHandledResults += response.data.handledResults;
        _this2.totalModifiedUsers += response.data.usersChanged;
        _this2.percentage = Math.round(_this2.totalHandledResults * 100 / _this2.totalResults);

        _this2.$counter.html("".concat(_this2.percentage, "%"));

        _this2.$meter.animate({
          width: "".concat(_this2.percentage, "%")
        }, 400);

        if (_this2.totalHandledResults < _this2.totalResults) {
          data.start += data.limit;

          _this2.handleNextBatch(data);
        } else {
          var message = '';

          if (data.userAction === 'block_users') {
            message = ACYC_LANGUAGES.ACYC_USERS_BLOCKED;
          } else {
            message = ACYC_LANGUAGES.ACYC_USERS_DELETED;
          }

          _this2.displayMessage(message.replace('%s', _this2.totalModifiedUsers), 'success');

          var $overlay = jQuery('#acyc__tests__handle__progressbar').closest('.reveal-overlay');
          $overlay.find('.close-button').on('click', function () {
            location.reload();
          });
          $overlay.on('click', function () {
            location.reload();
          });
          $overlay.find('.reveal').on('click', function (event) {
            event.stopPropagation();
          });
        }
      });
    }
  }, {
    key: "setConditionsMessage",
    value: function setConditionsMessage(matchingNumber) {
      var $targetUsersMessage = jQuery('#acyc__tests__handle__selected_users');
      var $checkedUsers = jQuery('[name="elements_checked[]"]:checked');

      if ($checkedUsers.length > 0) {
        $targetUsersMessage.html(ACYC_LANGUAGES.ACYC_ACTIONS_EXECUTED_X_MATCHING_AMONG_SELECTED.replace('%1$s', "<b>".concat(matchingNumber, "</b>")).replace('%2$s', $checkedUsers.length));
      } else {
        $targetUsersMessage.html(ACYC_LANGUAGES.ACYC_ACTIONS_EXECUTED_X_MATCHING.replace('%s', "<b>".concat(matchingNumber, "</b>")));
      }
    }
  }, {
    key: "setMatchingUsersCounter",
    value: function setMatchingUsersCounter() {
      var that = this;
      jQuery('[name^="acyc_config[conditions_selected]"]').on('change', function () {
        var selectedConditions = jQuery('input[name^="acyc_config[conditions_selected]"]:checked');
        var $checkedUsers = jQuery('[name="elements_checked[]"]:checked');

        if (selectedConditions.length === 0) {
          that.setConditionsMessage(0);
        } else {
          that.setConditionsMessage('<i class="acycicon-circle-o-notch acycicon-spin"></i>');
          var actionConditions = [];
          selectedConditions.each(function () {
            actionConditions.push(jQuery(this).val());
          });
          var data = {
            page: 'acychecker_tests',
            ctrl: 'tests',
            task: 'ajaxGetNbMatchingUsers',
            actionConditions: actionConditions.join(',')
          };

          if ($checkedUsers.length > 0) {
            data.selectedUsers = [];
            $checkedUsers.each(function () {
              if (jQuery(this).attr('data-acyc-finished') === 'true') {
                data.selectedUsers.push(jQuery(this).val());
              }
            });
          }

          AjaxService.post(ACYC_AJAX_URL, data).then(function (response) {
            if (response.status !== 'success') {
              that.displayMessage(response.message, 'error');
              return;
            }

            that.setConditionsMessage(response.data.matchingUsersNb);
          });
        }
      });
    }
  }]);

  return AcycTests;
}();

jQuery(function () {
  new AcycTests();
});